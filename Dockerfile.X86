# Use an official Ubuntu base image for reproducible builds
FROM ubuntu:22.04

# Set DEBIAN_FRONTEND to noninteractive to prevent prompts during installation
ENV DEBIAN_FRONTEND=noninteractive

# Install all system dependencies required for the base OS and for building our dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    wget \
    unzip \
    curl \
    pkg-config \
    nasm \
    libtiff5 \
    libturbojpeg0-dev \
    # OpenCV Dependencies
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libuvc-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    # WPILib Dependencies
    libudev-dev \
    libprotobuf-dev \
    protobuf-compiler \
    # Python and Debugging
    python3-dev \
    python3-pip \
    python3-numpy \
    gdb \
    && rm -rf /var/lib/apt/lists/*

# Install any pip packages needed
RUN pip install --no-cache-dir requests protobuf grpcio-tools

# Set a temporary working directory for building our dependencies
WORKDIR /opt

# --- Build and Install OpenCV ---
ARG OPENCV_VERSION="4.11.0"
RUN git clone --depth 1 --branch ${OPENCV_VERSION} https://github.com/opencv/opencv.git && \
    git clone --depth 1 --branch ${OPENCV_VERSION} https://github.com/opencv/opencv_contrib.git

RUN mkdir /opt/opencv/build
WORKDIR /opt/opencv/build

# Configure the OpenCV build
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
          -D CMAKE_INSTALL_PREFIX=/usr/local \
          -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules \
          -D BUILD_OPENCV_FEATURES2d=ON \
          -D BUILD_OPENCV_FLANN=ON \
          -D BUILD_EXAMPLES=OFF \
          -D BUILD_TESTS=OFF \
          -D BUILD_DOCS=OFF \
          -D BUILD_opencv_python3=OFF \
          -D WITH_TBB=ON \
          -D WITH_V4L=ON \
          -D WITH_OPENGL=ON \
          ..
# Compile and install
RUN make -j$(nproc)
RUN make install

# --- Build and Install AprilTag ---
WORKDIR /opt
ARG APRILTAG_VERSION="v3.3.0"
RUN git clone --depth 1 --branch ${APRILTAG_VERSION} https://github.com/AprilRobotics/apriltag.git

RUN mkdir /opt/apriltag/build
WORKDIR /opt/apriltag/build

# Configure, compile, and install AprilTag
RUN cmake ..
RUN make -j$(nproc)
RUN make install

# --- Build and Install WPILib ---
WORKDIR /opt
ARG WPILIB_VERSION="v2025.3.2"
RUN git clone --depth 1 --branch ${WPILIB_VERSION} https://github.com/wpilibsuite/allwpilib.git

RUN mkdir /opt/allwpilib/build
WORKDIR /opt/allwpilib/build

RUN cmake -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_INSTALL_PREFIX=/usr/local \
          -DWITH_OPENCV=ON \
          -DWITH_JAVA=OFF \
          -DWITH_SIMULATION_MODULES=OFF \
          -DWITH_WPILIB=OFF \
          -DWITH_TESTS=OFF \
          -DWITH_EXAMPLES=OFF \
          -DWITH_CS_TOOLS=OFF \
          -DWITH_GUI=OFF \
          ..
# Compile and install
RUN make -j$(nproc)
RUN make install

# Generate the protobuf files
WORKDIR /opt/allwpilib/wpimath
RUN python3 generate_nanopb.py --output_directory="/usr/local/include/wpimath/protobuf"

# --- Build and Install OpenPnP-Capture ---
WORKDIR /opt
RUN git clone https://github.com/openpnp/openpnp-capture.git

RUN mkdir /opt/openpnp-capture/build
WORKDIR /opt/openpnp-capture/build

# Configure, compile, and install
RUN cmake -D CMAKE_INSTALL_PREFIX=/usr/local ..
RUN make -j$(nproc)
RUN make install

# --- Install Nlohmann-json ---
WORKDIR /usr/local/include/nlohmann
RUN curl -L -o json.hpp https://github.com/nlohmann/json/releases/download/v3.11.2/json.hpp

# --- Compile and build cpp-httplib
WORKDIR /opt

ARG CPP_HTTPLIB_COMMIT="ecfd84c1712b1bfe92107e37843f97ecec537da9"
RUN git clone https://github.com/yhirose/cpp-httplib.git && \
    cd cpp-httplib && \
    git checkout ${CPP_HTTPLIB_COMMIT} && \
    mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          .. && \
    make -j$(nproc) && \
    make install

# --- Final Cleanup ---
# Clean up the source directories to reduce the final image size
# Also run ldconfig to update the linker cache for the newly installed libraries
RUN rm -rf /opt/opencv /opt/opencv_contrib /opt/apriltag /opt/allwpilib /opt/openpnp-capture
RUN ldconfig

# --- Create a non-root user for security ---
# Switch to the non-root user for subsequent commands and for running the container
RUN useradd -ms /bin/bash developer
USER developer

# Set the final working directory for the developer user
WORKDIR /home/developer/workspace
