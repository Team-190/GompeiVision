# .github/workflows/build.yml

name: Build and Package

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-and-package:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set repository name to lowercase
        id: repo_lowercase
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo_lowercase.outputs.name }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push builder image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.X86
          platforms: linux/amd64
          # Push the image to the registry to enable caching
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Enable layer caching from the registry
          cache-from: type=registry,ref=ghcr.io/${{ steps.repo_lowercase.outputs.name }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ steps.repo_lowercase.outputs.name }}:buildcache,mode=max

      - name: Build and package application inside container
        # This runs the build using the image created above.
        # It mounts the local source code into the container.
        run: |
          docker run --rm \
            -v "${{ github.workspace }}:/home/developer/workspace" \
            -w /home/developer/workspace \
            ${{ steps.meta.outputs.tags }} \
            /bin/bash -c "mkdir -p build && cd build && cmake .. && make"

      - name: List files for debugging
        # This will show us exactly what was built on the runner.
        run: ls -laR ./build

      - name: Find the .deb file name
        # This finds the exact name of the .deb file in the local build directory.
        id: find_deb
        run: echo "deb_file=$(find ./build -name '*.deb')" >> $GITHUB_OUTPUT

      - name: Upload .deb as a build artifact
        uses: actions/upload-artifact@v4
        with:
          name: gompeivision-installer-amd64
          path: ${{ steps.find_deb.outputs.deb_file }}
          retention-days: 7
