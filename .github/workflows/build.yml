# .github/workflows/build.yml

name: Build and Package

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-and-package:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set repository name to lowercase
        id: repo_lowercase
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo_lowercase.outputs.name }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.X86
          platforms: linux/amd64
          # Push the image to the registry to enable caching
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Load the image into the local Docker daemon so we can run it
          load: true
          # Enable layer caching from the registry
          cache-from: type=registry,ref=ghcr.io/${{ steps.repo_lowercase.outputs.name }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ steps.repo_lowercase.outputs.name }}:buildcache,mode=max

      - name: Run container in background
        # We run the container with a long-running command so we can inspect it.
        run: docker run -d --name extractor --entrypoint sleep ${{ steps.meta.outputs.tags }} infinity

      - name: Find .deb file location in container
        # This searches the entire container filesystem to find the exact path of the .deb file.
        id: find_path
        run: |
          DEB_PATH=$(docker exec extractor find / -name "*.deb" -print 2>/dev/null)
          echo "Found .deb file at: ${DEB_PATH}"
          echo "deb_path=${DEB_PATH}" >> $GITHUB_OUTPUT

      - name: Copy build output from the container
        # This uses the path found in the previous step to copy the file.
        run: |
          mkdir -p ./artifact
          docker cp extractor:${{ steps.find_path.outputs.deb_path }} ./artifact/

      - name: Find the .deb file name
        # This finds the exact name of the .deb file to upload it reliably
        id: find_deb
        run: echo "deb_file=$(find ./artifact -name '*.deb')" >> $GITHUB_OUTPUT

      - name: Upload .deb as a build artifact
        uses: actions/upload-artifact@v4
        with:
          # The artifact will be named e.g., "gompeivision-installer-amd64"
          name: gompeivision-installer-amd64
          path: ${{ steps.find_deb.outputs.deb_file }}
          retention-days: 7
