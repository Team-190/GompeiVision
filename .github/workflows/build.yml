# .github/workflows/build.yml

name: Build and Package

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  # --- Job 1: Build for AMD64 / X86 ---
  build-amd64:
    name: Build and Package (amd64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set repository name to lowercase
        id: repo_lowercase
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo_lowercase.outputs.name }}
          tags: |
            type=raw,value=builder-amd64-${{ github.sha }}

      - name: Build and push builder image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.X86
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.repo_lowercase.outputs.name }}:buildcache-amd64
          cache-to: type=registry,ref=ghcr.io/${{ steps.repo_lowercase.outputs.name }}:buildcache-amd64,mode=max

      - name: Build and package application inside container
        run: |
          docker run --rm \
            -u "$(id -u):$(id -g)" \
            -v "${{ github.workspace }}:/work" \
            -w /work \
            ${{ steps.meta.outputs.tags }} \
            /bin/bash -c "mkdir -p build && cd build && cmake .. && make"

      - name: List files for debugging
        run: ls -laR ./build

      - name: Find the .deb file name
        id: find_deb
        run: |
          DEB_FILE=$(find ./build -name '*.deb' -type f -print -quit)
          echo "Found file: $DEB_FILE"
          echo "deb_file<<EOF" >> $GITHUB_OUTPUT
          echo "$DEB_FILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload .deb as a build artifact
        uses: actions/upload-artifact@v4
        with:
          name: gompeivision-installer-amd64
          path: ${{ steps.find_deb.outputs.deb_file }}
          retention-days: 7

  # --- Job 2: Build for ARM64 ---
  build-arm64:
    name: Build and Package (arm64)
    runs-on: ubuntu-22.04-arm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set repository name to lowercase
        id: repo_lowercase
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo_lowercase.outputs.name }}
          tags: |
            type=raw,value=builder-arm64-${{ github.sha }}

      - name: Build and push builder image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.ARM
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.repo_lowercase.outputs.name }}:buildcache-arm64
          cache-to: type=registry,ref=ghcr.io/${{ steps.repo_lowercase.outputs.name }}:buildcache-arm64,mode=max

      - name: Build and package application inside container
        run: |
          docker run --rm \
            -u "$(id -u):$(id -g)" \
            -v "${{ github.workspace }}:/work" \
            -w /work \
            ${{ steps.meta.outputs.tags }} \
            /bin/bash -c "mkdir -p build && cd build && cmake .. && make"

      - name: List files for debugging
        run: ls -laR ./build

      - name: Find the .deb file name
        id: find_deb
        run: |
          DEB_FILE=$(find ./build -name '*.deb' -type f -print -quit)
          echo "Found file: $DEB_FILE"
          echo "deb_file<<EOF" >> $GITHUB_OUTPUT
          echo "$DEB_FILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload .deb as a build artifact
        uses: actions/upload-artifact@v4
        with:
          name: gompeivision-installer-arm64
          path: ${{ steps.find_deb.outputs.deb_file }}
          retention-days: 7

  publish-to-gh-pages:
    name: Publish to GitHub Pages APT Repo
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm64]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write

    steps:
      - name: Install APT utilities
        run: sudo apt-get update && sudo apt-get install -y dpkg-dev gpg

      - name: Create temporary deb download directories
        run: mkdir -p ./debs/amd64 && mkdir -p ./debs/arm64

      - name: Download amd64 artifact
        uses: actions/download-artifact@v4
        with:
          name: gompeivision-installer-amd64
          path: ./debs/amd64/

      - name: Download arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: gompeivision-installer-arm64
          path: ./debs/arm64/

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Build and sign APT repository
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          # Set up variables
          DISTRO="jammy"
          REPO_DIR="./apt-repo"
          
          # Create the repository structure
          mkdir -p $REPO_DIR/dists/$DISTRO/main/binary-amd64
          mkdir -p $REPO_DIR/dists/$DISTRO/main/binary-arm64
          
          # Move the built packages into the repository
          find ./debs/amd64 -name '*.deb' -exec mv {} $REPO_DIR/dists/$DISTRO/main/binary-amd64/ \;
          find ./debs/arm64 -name '*.deb' -exec mv {} $REPO_DIR/dists/$DISTRO/main/binary-arm64/ \;
          
          # Generate the 'Packages' files, stripping the leading './' from filenames for compatibility.
          (cd $REPO_DIR/dists/$DISTRO/main/binary-amd64 && dpkg-scanpackages --multiversion . | sed 's|^Filename: \./|Filename: |' > Packages && gzip -9c Packages > Packages.gz)
          (cd $REPO_DIR/dists/$DISTRO/main/binary-arm64 && dpkg-scanpackages --multiversion . | sed 's|^Filename: \./|Filename: |' > Packages && gzip -9c Packages > Packages.gz)
          
          # Generate the 'Release' file
          cat > $REPO_DIR/dists/$DISTRO/Release <<EOF
          Origin: ${{ github.repository_owner }} GompeiVision
          Label: GompeiVision
          Suite: stable
          Version: 1.0
          Codename: ${DISTRO}
          Architectures: amd64 arm64
          Components: main
          Description: GompeiVision APT repository hosted on GitHub Pages
          Date: $(date -Ru)
          EOF
          # Append checksums to the Release file. This robust method correctly
          # includes file sizes, which is required by APT and is less prone to
          # silent script errors.
          (
            cd "$REPO_DIR/dists/$DISTRO" && {
              echo "MD5Sum:";
              find main -type f -exec md5sum {} + | while read -r hash name; do
                size=$(stat -c%s "$name")
                printf " %s %16d %s\n" "$hash" "$size" "$name"
              done
              echo "SHA256:";
              find main -type f -exec sha256sum {} + | while read -r hash name; do
                size=$(stat -c%s "$name")
                printf " %s %16d %s\n" "$hash" "$size" "$name"
              done
            }
          ) >> "$REPO_DIR/dists/$DISTRO/Release"
          
          # Sign the Release file
          (cd $REPO_DIR/dists/$DISTRO && gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --clearsign --digest-algo SHA256 -o InRelease Release)
          (cd $REPO_DIR/dists/$DISTRO && gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --digest-algo SHA256 -abs -o Release.gpg Release)
          
          # Export public key
          GPG_KEY_ID=$(gpg --list-keys --with-colons | grep '^pub' | cut -d: -f5)
          gpg --armor --export $GPG_KEY_ID > $REPO_DIR/public.key

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./apt-repo
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: "Deploy: Update APT repository"
          publish_branch: gh-pages