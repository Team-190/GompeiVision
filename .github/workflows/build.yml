# .github/workflows/build.yml

name: Build and Package

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-and-package:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.X86
          platforms: linux/amd64
          # Load the image into the local Docker daemon so we can run it
          load: true
          tags: gompeivision:amd64

      - name: Create a temporary container
        # We create a container from the image just to copy files out of it.
        run: docker create --name extractor gompeivision:amd64

      - name: List files in container for debugging
        # This will show us the exact directory structure to find the .deb file.
        run: docker exec extractor ls -R /tmp/GompeiVision

      - name: Copy build output from the container
        # This copies the entire project directory content from the container.
        # This is more robust than guessing the exact build directory name.
        run: |
          mkdir -p ./artifact
          docker cp extractor:/tmp/GompeiVision/ ./artifact

      - name: Find the .deb file name
        # This finds the exact name of the .deb file to upload it reliably
        id: find_deb
        run: echo "deb_file=$(find ./artifact -name '*.deb')" >> $GITHUB_OUTPUT

      - name: Upload .deb as a build artifact
        uses: actions/upload-artifact@v4
        with:
          # The artifact will be named e.g., "gompeivision-installer-amd64"
          name: gompeivision-installer-amd64
          path: ${{ steps.find_deb.outputs.deb_file }}
          retention-days: 7
