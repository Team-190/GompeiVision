# .github/workflows/build.yml

name: Build and Package

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  # --- Job 1: Build for AMD64 / X86 ---
  build-amd64:
    name: Build and Package (amd64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set repository name to lowercase
        id: repo_lowercase
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo_lowercase.outputs.name }}
          tags: |
            type=raw,value=builder-amd64-${{ github.sha }}

      - name: Build and push builder image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.X86
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.repo_lowercase.outputs.name }}:buildcache-amd64
          cache-to: type=registry,ref=ghcr.io/${{ steps.repo_lowercase.outputs.name }}:buildcache-amd64,mode=max

      - name: Build and package application inside container
        run: |
          docker run --rm \
            -u "$(id -u):$(id -g)" \
            -v "${{ github.workspace }}:/work" \
            -w /work \
            ${{ steps.meta.outputs.tags }} \
            /bin/bash -c "mkdir -p build && cd build && cmake .. && make"

      - name: List files for debugging
        run: ls -laR ./build

      - name: Find the .deb file name
        id: find_deb
        run: |
          DEB_FILE=$(find ./build -name '*.deb' -type f -print -quit)
          echo "Found file: $DEB_FILE"
          echo "deb_file<<EOF" >> $GITHUB_OUTPUT
          echo "$DEB_FILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload .deb as a build artifact
        uses: actions/upload-artifact@v4
        with:
          name: gompeivision-installer-amd64
          path: ${{ steps.find_deb.outputs.deb_file }}
          retention-days: 7

  # --- Job 2: Build for ARM64 ---
  build-arm64:
    name: Build and Package (arm64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set repository name to lowercase
        id: repo_lowercase
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      # QEMU is required to run ARM containers on an x86 host runner
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo_lowercase.outputs.name }}
          tags: |
            type=raw,value=builder-arm64-${{ github.sha }}

      - name: Build and push builder image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.ARM
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.repo_lowercase.outputs.name }}:buildcache-arm64
          cache-to: type=registry,ref=ghcr.io/${{ steps.repo_lowercase.outputs.name }}:buildcache-arm64,mode=max

      - name: Build and package application inside container
        run: |
          docker run --rm \
            --platform linux/arm64 \
            -u "$(id -u):$(id -g)" \
            -v "${{ github.workspace }}:/work" \
            -w /work \
            ${{ steps.meta.outputs.tags }} \
            /bin/bash -c "mkdir -p build && cd build && cmake .. && make"

      - name: List files for debugging
        run: ls -laR ./build

      - name: Find the .deb file name
        id: find_deb
        run: |
          DEB_FILE=$(find ./build -name '*.deb' -type f -print -quit)
          echo "Found file: $DEB_FILE"
          echo "deb_file<<EOF" >> $GITHUB_OUTPUT
          echo "$DEB_FILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload .deb as a build artifact
        uses: actions/upload-artifact@v4
        with:
          name: gompeivision-installer-arm64
          path: ${{ steps.find_deb.outputs.deb_file }}
          retention-days: 7