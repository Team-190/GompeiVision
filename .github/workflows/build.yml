# .github/workflows/build.yml

name: Build and Package

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-and-package:
    # This name will be shown in the GitHub UI, including the matrix variable.
    name: Build and Package (${{ matrix.arch }})
    runs-on: ubuntu-latest
    # Define the matrix strategy
    strategy:
      # fail-fast: false ensures that if one architecture fails, the other will still run.
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            dockerfile: Dockerfile.X86
          - arch: arm64
            platform: linux/arm64
            # This job requires the Dockerfile.ARM we discussed previously.
            dockerfile: Dockerfile.ARM

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set repository name to lowercase
        id: repo_lowercase
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # We'll create a unique tag for each architecture's builder image
          # to prevent race conditions when pushing to the registry.
          images: ghcr.io/${{ steps.repo_lowercase.outputs.name }}
          tags: |
            type=raw,value=builder-${{ matrix.arch }}-${{ github.sha }}

      - name: Build and push builder image
        uses: docker/build-push-action@v5
        with:
          context: .
          # Use the Dockerfile and platform from the matrix
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Use a separate cache for each architecture
          cache-from: type=registry,ref=ghcr.io/${{ steps.repo_lowercase.outputs.name }}:buildcache-${{ matrix.arch }}
          cache-to: type=registry,ref=ghcr.io/${{ steps.repo_lowercase.outputs.name }}:buildcache-${{ matrix.arch }},mode=max

      - name: Build and package application inside container
        # This runs the build using the image created above.
        # It mounts the local source code into a neutral /work directory.
        run: |
          docker run --rm \
            --platform ${{ matrix.platform }} \
            -u "$(id -u):$(id -g)" \
            -v "${{ github.workspace }}:/work" \
            -w /work \
            ${{ steps.meta.outputs.tags }} \
            /bin/bash -c "mkdir -p build && cd build && cmake .. && make"

      - name: List files for debugging
        # This will show us exactly what was built on the runner.
        run: ls -laR ./build

      - name: Find the .deb file name
        # This finds the .deb file and sets the output using the recommended heredoc syntax
        # to prevent formatting errors.
        id: find_deb
        run: |
          DEB_FILE=$(find ./build -name '*.deb' -type f -print -quit)
          echo "Found file: $DEB_FILE"
          echo "deb_file<<EOF" >> $GITHUB_OUTPUT
          echo "$DEB_FILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload .deb as a build artifact
        uses: actions/upload-artifact@v4
        with:
          # Create a uniquely named artifact for each architecture
          name: gompeivision-installer-${{ matrix.arch }}
          path: ${{ steps.find_deb.outputs.deb_file }}
          retention-days: 7